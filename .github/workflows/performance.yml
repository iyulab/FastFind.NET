name: Performance Testing

on:
  workflow_dispatch:
    inputs:
      test_duration:
        description: 'Test duration level (Quick/Standard/Extended)'
        required: true
        default: 'Quick'
        type: choice
        options:
        - Quick
        - Standard
        - Extended
  schedule:
    # Weekly performance tests on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
    # Only run performance tests on main branch pushes with [perf] tag
    if: contains(github.event.head_commit.message, '[perf]')

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: 'src/FastFind.sln'

jobs:
  performance-tests:
    runs-on: windows-latest # Windows for full performance validation
    timeout-minutes: 120 # 2 hours max for extended tests
    
    strategy:
      matrix:
        test_suite:
          - name: "Core Performance"
            filter: "Category=Performance&Suite=Core"
            timeout: 30
          - name: "SIMD Performance" 
            filter: "Category=Performance&Suite=SIMD"
            timeout: 20
          - name: "StringPool Performance"
            filter: "Category=Performance&Suite=StringPool"
            timeout: 15
          - name: "Integration Performance"
            filter: "Category=Performance&Suite=Integration"
            timeout: 45
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    - name: Build (Release)
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore
    
    - name: System Info
      run: |
        echo "🖥️ System Information"
        echo "OS: $env:OS"
        echo "Processor: $env:PROCESSOR_IDENTIFIER"
        echo "CPU Cores: $env:NUMBER_OF_PROCESSORS"
        echo "Memory: $(Get-CimInstance -ClassName Win32_ComputerSystem | Select-Object -ExpandProperty TotalPhysicalMemory)"
        echo ""
        echo "🔧 .NET Information"
        dotnet --info
    
    - name: Run ${{ matrix.test_suite.name }}
      timeout-minutes: ${{ matrix.test_suite.timeout }}
      run: |
        echo "🚀 Running ${{ matrix.test_suite.name }}"
        echo "Filter: ${{ matrix.test_suite.filter }}"
        echo "Duration: ${{ github.event.inputs.test_duration || 'Standard' }}"
        
        $env:PERFORMANCE_TEST_DURATION = "${{ github.event.inputs.test_duration || 'Standard' }}"
        dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal --logger trx --results-directory test-results-${{ strategy.job-index }} --filter "${{ matrix.test_suite.filter }}"
    
    - name: Upload Performance Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results-${{ matrix.test_suite.name }}-${{ strategy.job-index }}
        path: |
          test-results-${{ strategy.job-index }}/
          **/*benchmark*
          **/*performance*
        retention-days: 30

  performance-summary:
    needs: performance-tests
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: all-results/
    
    - name: Performance Summary
      run: |
        echo "## 📊 Performance Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Duration Level**: ${{ github.event.inputs.test_duration || 'Standard' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Expected Performance Targets" >> $GITHUB_STEP_SUMMARY
        echo "- **SIMD Operations**: >1,000,000 ops/sec" >> $GITHUB_STEP_SUMMARY
        echo "- **File Indexing**: >100,000 files/sec" >> $GITHUB_STEP_SUMMARY
        echo "- **FastFileItem Creation**: >200,000 items/sec" >> $GITHUB_STEP_SUMMARY
        echo "- **StringPool Compression**: >60% memory reduction" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📈 Results Analysis" >> $GITHUB_STEP_SUMMARY
        echo "Performance test results are available in the uploaded artifacts." >> $GITHUB_STEP_SUMMARY
        echo "Check individual test suite results for detailed metrics." >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.performance-tests.result }}" = "success" ]; then
          echo "✅ **Status**: All performance tests completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Status**: Some performance tests may have failed or timed out" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const message = `## 🚀 Performance Test Results
          
          Performance tests have been executed for this PR.
          
          **Configuration:**
          - Duration: ${{ github.event.inputs.test_duration || 'Standard' }}
          - Status: ${{ needs.performance-tests.result }}
          
          **Expected Targets:**
          - SIMD Operations: >1M ops/sec
          - File Indexing: >100K files/sec  
          - Memory Efficiency: >60% compression
          
          📊 Detailed results are available in the workflow artifacts.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });