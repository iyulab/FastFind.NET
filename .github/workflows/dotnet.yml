name: FastFind.NET CI/CD Production
on:
  # Manual trigger - Always available for direct execution
  workflow_dispatch:
    inputs:
      push_to_nuget:
        description: 'Push packages to NuGet (even without version tag)'
        required: false
        default: false
        type: boolean
      run_performance_tests:
        description: 'Run performance benchmarks'
        required: false
        default: false
        type: boolean
  # Automatic trigger - Only when version changes or workflow updates
  push:
    branches: [ "main" ]
    paths:
      - 'src/Directory.Build.props'    # Version changes trigger deployment
      - '.github/workflows/**'        # Workflow updates
  # Pull request validation - Full testing on any src changes
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - '.github/workflows/**'

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: 'src/FastFind.sln'
  
jobs:
  # üß™ ÌÅ¨Î°úÏä§ ÌîåÎû´Ìèº ÌÖåÏä§Ìä∏ (CI/CD ÏïàÏ†ïÏÑ± Î≥¥Ïû•)
  test-cross-platform:
    name: Cross-Platform Tests
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: windows
            run-integration: true
          - os: ubuntu-latest
            platform: linux
            run-integration: false
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    - name: Build
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore
    
    - name: Run Core Tests (CI/CD Safe - Performance Tests Excluded)
      run: |
        dotnet test ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger trx \
          --results-directory TestResults/ \
          --filter "Category!=Performance&Category!=Stress&Category!=Benchmark&Category!=Integration" \
          --collect:"XPlat Code Coverage"

    - name: Run Windows Integration Tests
      if: matrix.run-integration == true
      run: |
        dotnet test ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --filter "Category=Windows&Category!=Performance&Category!=Stress&Category!=Benchmark" \
          --collect:"XPlat Code Coverage"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.platform }}
        path: |
          TestResults/
          **/coverage.cobertura.xml
    

  # ‚ö° ÏÑ±Îä• Î≤§ÏπòÎßàÌÅ¨ (ÏàòÎèô Ìä∏Î¶¨Í±∞Îßå)
  performance-tests:
    name: Performance Benchmarks
    runs-on: windows-latest
    needs: test-cross-platform
    if: github.event.inputs.run_performance_tests == 'true'

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Run Performance Tests
      run: |
        echo "üöÄ Running performance benchmarks..."
        dotnet test ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --filter "Category=Performance" \
          --logger trx --results-directory PerformanceResults/ || true

    - name: Upload Performance Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          PerformanceResults/
          BenchmarkDotNet.Artifacts/**

  # üì¶ ÎπåÎìú Î∞è Î∞∞Ìè¨
  pack-and-publish:
    needs: test-cross-platform
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch')
    strategy:
      matrix:
        project: 
          - path: 'src/FastFind/FastFind.csproj'
            name: 'FastFind.Core'
          - path: 'src/FastFind.Windows/FastFind.Windows.csproj'
            name: 'FastFind.Windows'
          # Unix Íµ¨ÌòÑÏãú ÌôúÏÑ±Ìôî ÏòàÏ†ï
          # - path: 'src/FastFind.Unix/FastFind.Unix.csproj'
          #   name: 'FastFind.Unix'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    - name: Build ${{ matrix.project.name }}
      run: dotnet build ${{ matrix.project.path }} --configuration Release --no-restore
    
    - name: Pack ${{ matrix.project.name }}
      run: dotnet pack ${{ matrix.project.path }} --configuration Release --no-build --output nupkg
    
    - name: List generated packages
      run: ls -la nupkg/
    
    - name: Validate package
      run: |
        for package in nupkg/*.nupkg; do
          echo "Validating package: $package"
          dotnet nuget verify "$package" || echo "Package verification failed for $package"
        done
    
    - name: Extract Version from Directory.Build.props
      id: version
      run: |
        # Extract current version from Directory.Build.props
        CURRENT_VERSION=$(grep -oP '<Version>\K[^<]+' src/Directory.Build.props || echo "1.0.0")
        echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
        echo "üì¶ Current version: ${CURRENT_VERSION}"

        # Create version tag format
        echo "VERSION_TAG=v${CURRENT_VERSION}" >> $GITHUB_OUTPUT

    - name: Check Version Change and Deploy Conditions
      id: deploy_check
      run: |
        CURRENT_VERSION="${{ steps.version.outputs.CURRENT_VERSION }}"
        VERSION_CHANGED="false"
        SHOULD_DEPLOY="false"
        REASON="no_trigger"

        echo "üîç Checking deployment conditions..."

        # Check if Directory.Build.props was changed in this push
        if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
          if git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -q "src/Directory.Build.props"; then
            echo "‚úÖ Directory.Build.props was changed in this push"
            VERSION_CHANGED="true"

            # Get previous version for comparison
            PREVIOUS_VERSION=$(git show ${{ github.event.before }}:src/Directory.Build.props | grep -oP '<Version>\K[^<]+' || echo "0.0.0")
            echo "üìä Previous version: ${PREVIOUS_VERSION}"
            echo "üìä Current version: ${CURRENT_VERSION}"

            if [ "${PREVIOUS_VERSION}" != "${CURRENT_VERSION}" ]; then
              echo "üöÄ Version changed from ${PREVIOUS_VERSION} to ${CURRENT_VERSION}"
              if [ "${{ github.ref }}" == "refs/heads/main" ]; then
                SHOULD_DEPLOY="true"
                REASON="version_change_on_main"
              else
                echo "‚ö†Ô∏è Version changed but not on main branch"
                REASON="version_change_not_main"
              fi
            else
              echo "‚ÑπÔ∏è Directory.Build.props changed but version remained the same"
              REASON="props_change_no_version"
            fi
          else
            echo "‚ÑπÔ∏è Directory.Build.props was not changed"
          fi
        fi

        # Manual trigger override
        if [ "${{ github.event.inputs.push_to_nuget }}" == "true" ]; then
          echo "üîß Manual deployment trigger activated"
          SHOULD_DEPLOY="true"
          REASON="manual_trigger"
        fi

        # Check if version already exists on NuGet (optional - can be enabled later)
        # We'll skip this for now to allow re-publishing same version if needed

        echo "SHOULD_DEPLOY=${SHOULD_DEPLOY}" >> $GITHUB_OUTPUT
        echo "REASON=${REASON}" >> $GITHUB_OUTPUT
        echo "VERSION_CHANGED=${VERSION_CHANGED}" >> $GITHUB_OUTPUT
        echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

        echo "üìã Deployment Decision:"
        echo "   Should Deploy: ${SHOULD_DEPLOY}"
        echo "   Reason: ${REASON}"
        echo "   Version: ${CURRENT_VERSION}"
    
    - name: Push ${{ matrix.project.name }} to NuGet
      if: steps.deploy_check.outputs.SHOULD_DEPLOY == 'true'
      run: |
        echo "üöÄ Deploying ${{ matrix.project.name }} v${{ steps.deploy_check.outputs.CURRENT_VERSION }} to NuGet"
        echo "üìã Reason: ${{ steps.deploy_check.outputs.REASON }}"
        echo "üì¶ Packages in nupkg/:"
        ls -la nupkg/

        echo "üì§ Pushing to NuGet..."
        dotnet nuget push ./nupkg/*.nupkg \
          --source https://api.nuget.org/v3/index.json \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --skip-duplicate \
          --no-symbols

        echo "‚úÖ NuGet deployment completed for ${{ matrix.project.name }} v${{ steps.deploy_check.outputs.CURRENT_VERSION }}"
    
    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages-${{ matrix.project.name }}
        path: nupkg/*.nupkg
        retention-days: 30

  create-release:
    needs: [test-cross-platform, pack-and-publish]
    runs-on: ubuntu-latest
    if: needs.pack-and-publish.outputs.SHOULD_DEPLOY == 'true' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Get version info
      id: version
      run: |
        if [ "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]; then
          VERSION="${{ github.ref_name }}"
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        else
          # Extract version from Directory.Build.props
          VERSION=$(grep -oP '<Version>\K[^<]+' src/Directory.Build.props || echo "1.0.0")
          echo "VERSION=v${VERSION}" >> $GITHUB_OUTPUT
        fi
        echo "Using version: ${VERSION}"
    
    - name: Generate changelog
      id: changelog
      run: |
        if [ "${{ steps.version.outputs.VERSION }}" != "$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo 'v0.0.0')" ]; then
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo 'HEAD~10')
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "### üìã Changes from ${PREVIOUS_TAG}" >> $GITHUB_OUTPUT
          git log ${PREVIOUS_TAG}..HEAD --oneline --pretty=format:'- %s (%h)' >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG=### üìã Changes\nSee commit history for details." >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: FastFind.NET ${{ steps.version.outputs.VERSION }}
        body: |
          ## FastFind.NET ${{ steps.version.outputs.VERSION }}
          
          ### üì¶ Published Packages
          - **FastFind.Core**: Core interfaces and models for cross-platform file search
          - **FastFind.Windows**: Windows-optimized implementation with SIMD acceleration
          
          ### üöÄ Key Features
          - High-performance file search with SIMD string matching
          - Memory-optimized string pooling
          - Real-time file system monitoring
          - Windows-specific optimizations (NTFS, WMI integration)
          
          ### üöß Roadmap
          - **FastFind.Unix**: Unix/Linux implementation (coming soon)
          - **FastFind.MacOS**: macOS-specific optimizations (planned)
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ### üì• Installation
          ```bash
          # Core package
          dotnet add package FastFind.Core
          
          # Windows implementation
          dotnet add package FastFind.Windows
          ```
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
        files: artifacts/**/*.nupkg
        generate_release_notes: true
        make_latest: ${{ !contains(steps.version.outputs.VERSION, '-') }}
